---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => ({ ...x }))
   ·           ─┬─         ──┬─
   ·            │            ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.flatMap(x => ({ ...x }))
   ·           ───┬───         ──┬─
   ·              │              ╰── They should be mutated in place
   ·              ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => ({ ...x, ...y }))
   ·           ─┬─         ──┬─  ────
   ·            │            ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:23]
 1 │ let b = []; let a = b.map(x => ({ ...x }))
   ·                       ─┬─         ──┬─
   ·                        │            ╰── They should be mutated in place
   ·                        ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => { return { ...x } })
   ·           ─┬─                 ──┬─
   ·            │                    ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify array elements in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => [ ...x ])
   ·           ─┬─        ──┬─
   ·            │           ╰── They should be mutated in place
   ·            ╰── This map call spreads an array
   ╰────
  help: Consider using `Array.prototype.concat` or `Array.prototype.push` instead

  ⚠ oxc(no-map-spread): Spreading to modify array elements in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => [ ...x, ...y ])
   ·           ─┬─        ──┬─  ────
   ·            │           ╰── They should be mutated in place
   ·            ╰── This map call spreads an array
   ╰────
  help: Consider using `Array.prototype.concat` or `Array.prototype.push` instead

  ⚠ oxc(no-map-spread): Spreading to modify array elements in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => { return [ ...x ] })
   ·           ─┬─                 ──┬─
   ·            │                    ╰── They should be mutated in place
   ·            ╰── This map call spreads an array
   ╰────
  help: Consider using `Array.prototype.concat` or `Array.prototype.push` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => { let x2 = { ...x }; return x2; })
   ·           ─┬─                   ──┬─
   ·            │                      ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => ({ ...x })); console.log(b)
   ·           ─┬─         ──┬─
   ·            │            ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => someCond ? { ...x, foo: true } : { ...x, foo: false })
   ·           ─┬─                   ──┬─
   ·            │                      ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => someCond ? { ...x, foo: true } : { ...x, foo: false })
   ·           ─┬─                                         ──┬─
   ·            │                                            ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  × Expected `,` but found `}`
   ╭─[no_map_spread.tsx:1:49]
 1 │ let a = b.map(({ x, y }) => ({ ...(cond ? x : y })
   ·                                                 ┬
   ·                                                 ╰── `,` expected
   ╰────

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(x => (0, { ...x }))
   ·           ─┬─            ──┬─
   ·            │               ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map(({ x, y }) => (x ?? { ...y }))
   ·           ─┬─                       ──┬─
   ·            │                          ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead

  ⚠ oxc(no-map-spread): Spreading to modify object properties in `map` calls is inefficient
   ╭─[no_map_spread.tsx:1:11]
 1 │ let a = b.map((x => ({ ...x }))) as MyCustomMapper
   ·           ─┬─          ──┬─
   ·            │             ╰── They should be mutated in place
   ·            ╰── This map call spreads an object
   ╰────
  help: Consider using `Object.assign` instead
